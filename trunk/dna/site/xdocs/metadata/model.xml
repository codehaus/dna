<?xml version="1.0"?>

<document>
    <properties>
        <title>MetaData Model</title>
        <author>Peter Donald</author>
    </properties>
    <body>
        <section name="MetaData Model">
            <p>
                This document describes the minimal set of metadata requirements
                for DNA components. The metadata includes what resources the
                component can provide to other components and what resources the
                component requires from the container.
            </p>
            <p>
                The annotations are located in the <code>org.codehaus.dna.annotation</code>
                package
            </p>
            <ul>
                <li>
                    <a href="#ComponentDescriptor">ComponentDescriptor</a>: The
                    object must declare that they are DNA components and not just
                    some random java object.
                </li>
                <li>
                    <a href="#ServiceDescriptorSet">ServiceDescriptorSet</a>:
                    The object must declare what services (aka work interfaces)
                    that the component implements and is capable of providing to
                    other components.
                </li>
                <li>
                    <a href="#LoggerDescriptorSet">LoggerDescriptorSet</a>: The
                    component must declare the Logger objects that they require.
                </li>
                <li>
                    <a href="#ConfigurationDescriptor">ConfigurationDescriptor</a>: The
                    object may declare location of the configuration schema
                    (if any) that can be used to validate any configuraiton
                    data that they are provided.
                </li>
                <li>
                    <a href="#DependencyDescriptorSet">DependencyDescriptorSet</a>:
                    The object must declare the services that it expects to find
                    in the ResourceLocator.
                </li>
            </ul>
            <p>
                DNA components can optionally declare their compatibility with
                a particular container extension. A component could declare
                that the component requires, supports or is incompatible with
                the container extension. For further details on extensions see
                the
                <a href="extensions.html">extensions</a> document.
            </p>
        </section>
        <section name="Model Elements">
            <subsection name="ComponentDescriptor">
                <p>
                    The
                    <code>ComponentDescriptor</code> annotation is specified in
                    at the class level and simply declares that the class is a DNA
                    component. It must be present for tools recognize the component.
                </p>
                <p>
                    Example:
                </p>
                <source><![CDATA[
/**
 * This is a DNA component.
 */
@ComponentDescriptor()
public class MyComponent
{
   ...
}
                    ]]></source>
            </subsection>
            <subsection name="ServiceDescriptorSet">
                <p>
                    The <code>ServiceDescriptorSet</code> contains
                    a set of <code>ServiceDescriptor</code> that declares the set
                    of services that the component is capable of providing to other
                    components. The <code>ServiceDescriptorSet</code> is specified at
                    the class level. The <code>ServiceDescriptor</code> annotation
                    has the following parameters.
                </p>
                <table>
                    <tr>
                        <th>Name</th>
                        <th>Default Value</th>
                        <th>Description</th>
                        <th>Optional</th>
                    </tr>
                    <tr>
                        <td>type</td>
                        <td>n/a</td>
                        <td>
                            The type parameter specifies the class of the
                            interface for service.
                        </td>
                        <td>false</td>
                    </tr>
                </table>
                <p>
                    Example:
                </p>
                <source><![CDATA[
@ServiceDescriptorSet({
    @ServiceDescriptor(type = MyService1.class),
    @ServiceDescriptor(type = MyService2.class) })
public class MyComponent
  implements MyService1, MyService2, SomeOtherInterface
{
   ...
}
                    ]]></source>
            </subsection>
            <subsection name="ExtensionDescriptorSet">
                <p>
                    The <code>ExtensionDescriptorSet</code> annotation declares
                    the components relationship to a container extension. The
                    <code>ExtensionDescriptorSet</code> annotation is specified
                    at the class level. It contains <code>ExtensionDescriptor</code>
                    objects with the following parameters.
                </p>
                <table>
                    <tr>
                        <th>Name</th>
                        <th>Default Value</th>
                        <th>Description</th>
                        <th>Optional</th>
                    </tr>
                    <tr>
                        <td>name</td>
                        <td>n/a</td>
                        <td>
                            The name of the container extension.
                        </td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>compatibility</td>
                        <td>Compatibility.REQUIRED</td>
                        <td>
                            The compatibility of container with extension. Must
                            be one of Compatibility.REQUIRED, Compatibility.SUPPORTS or
                            Compatibility.INCOMPATIBLE.
                        </td>
                        <td>true</td>
                    </tr>
                </table>
                <p>
                    Example:
                </p>
                <source><![CDATA[
@ExtensionDescriptorSet({
    @ExtensionDescriptor(name = "tx")
    @ExtensionDescriptor(name = "mx", compatibility = Compatibility.SUPPORTS)
    @ExtensionDescriptor(name = "remote",
                         compatibility = Compatibility.INCOMPATIBLE) })
public class MyComponent
{
   ...
}
                    ]]></source>
            </subsection>
            <subsection name="LoggerDescriptorSet">
                <p>
                    The <code>LoggerDescriptorSet</code> annotation declares the
                    names of the loggers that the component will use. The
                    <code>LoggerDescriptorSet</code> annotation is specified as part
                    of the
                    <a href="../apidocs/org/codehaus/dna/LogEnabled.html#enableLogging(org.codehaus.dna.Logger)">
                        LogEnabled.enableLogging(Logger)</a> method. It contains a
                    set of <code>LoggerDescriptor</code> elements that have the
                    following parameters.
                </p>
                <table>
                    <tr>
                        <th>Name</th>
                        <th>Default Value</th>
                        <th>Description</th>
                        <th>Optional</th>
                    </tr>
                    <tr>
                        <td>name</td>
                        <td>""</td>
                        <td>
                            The name of the logger. The Logger object passed to
                            the component has the name "".
                        </td>
                        <td>true</td>
                    </tr>
                </table>
                <p>
                    Example:
                </p>
                <source><![CDATA[
@LoggerDescriptorSet( { @LoggerDescriptor(), @LoggerDescriptor(name = "auth") } )
public void enableLogging( Logger logger )
{
   ...
}
                    ]]></source>
            </subsection>
            <subsection name="ConfigurationDescriptor">
                <p>
                    The <code>ConfigurationDescriptor</code> annotation declares the
                    schema that can be used to validate the configuration for the
                    component. The
                    <code>ConfigurationDescriptor</code> annotation is
                    specified as part of the
                    <a href="../apidocs/org/codehaus/dna/Configurable.html#configure(org.codehaus.dna.Configuration)">
                        Configurable.configure(Configuration)</a> method
                    and has the following parameters.
                </p>
                <table>
                    <tr>
                        <th>Name</th>
                        <th>Default Value</th>
                        <th>Description</th>
                        <th>Optional</th>
                    </tr>
                    <tr>
                        <td>location</td>
                        <td>n/a</td>
                        <td>
                            The location of the configuration schema file
                            relative to the .class file.
                        </td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>type</td>
                        <td>""</td>
                        <td>
                            The type of the schema file. If not specified then
                            the underlying validator will attempt to guess the
                            schema type either via the file extension (for DTDs)
                            or via the namespace used in the xml schema file.
                        </td>
                        <td>true</td>
                    </tr>
                </table>
                <p>
                    Example:
                </p>
                <source><![CDATA[
@ConfigurationDescriptor(location = "MyComponent-schema.dtd")
public void configure( Configuration config )
    throws ConfigurationException
{
   ...
}
                    ]]></source>
            </subsection>
            <subsection name="DependencyDescriptorSet">
                <p>
                    The <code>DependencyDescriptorSet</code> annotation declares the
                    services that the component should be able to access from the
                    ResourceLocator. The <code>DependencyDescriptorSet</code>
                    annotation is specified as part of the
                    <a href="../apidocs/org/codehaus/dna/Composable.html#compose(org.codehaus.dna.ResourceLocator)">
                        Composable.compose(ResourceLocator)</a> method and contains
                    <code>DependencyDescriptor</code> that and has the following
                    parameters.
                </p>
                <table>
                    <tr>
                        <th>Name</th>
                        <th>Default Value</th>
                        <th>Description</th>
                        <th>Optional</th>
                    </tr>
                    <tr>
                        <td>type</td>
                        <td>n/a</td>
                        <td>
                            The type name of the dependency.
                        </td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>optional</td>
                        <td>false</td>
                        <td>
                            Specifies whether the dependency is optional or
                            required.
                        </td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>qualifier</td>
                        <td>""</td>
                        <td>
                            Specifies the qualifier used to default key value.
                            See description of key parameter for further
                            details. This parameter should not be specified if the
                            key parameter is specified.
                        </td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>key</td>
                        <td>See Description</td>
                        <td>
                            The key specifies the name used to access service
                            from the ResourceLocator. The default value for
                            this parameter is either the type name or
                            &lt;type-name&gt;/&lt;qualifier&gt; if the
                            qualifier parameter is specified.
                        </td>
                        <td>true</td>
                    </tr>
                </table>
                <p>
                    Example:
                </p>
                <source><![CDATA[
@DependencyDescriptorSet({
    @DependencyDescriptor(type = Store.class),
    @DependencyDescriptor(type = PersistenceEngine.class, key="persist"),
    @DependencyDescriptor(type = Store.class, qualifier = "TempSpool",
                          optional = true) } )
public void compose( ResourceLocator locator )
    throws MissingResourceException
{
   ...
}
                    ]]></source>
            </subsection>
        </section>
    </body>
</document>
